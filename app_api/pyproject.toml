[build-system]
requires = ["setuptools>=68"]
build-backend = "setuptools.build_meta"

[project]
name = "agentic_rag"
version = "0.1.0"
description = "Agentic RAG REST API (FastAPI + SSE)"
requires-python = ">=3.12"
readme = "README.md"
authors = [{ name = "Your Name", email = "you@example.com" }]


# Keep deps minimal; add your RAG stack later
dependencies = [
    "fastapi>=0.119.0", # latest FastAPI
    "uvicorn[standard]>=0.30.0", # ASGI server
    "sse-starlette>=3.0.0", # solid SSE implementation
    "pydantic-settings>=2.4.0", # env-based configuration
    "httpx>=0.27.2", # outbound HTTP (e.g., models, tools)
    "orjson>=3.10.0", # fast JSON responses
    "python-dotenv>=1.0.1",
    "core",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3",
    "ruff>=0.6.9",
]


[tool.uv]
# nothing required; `uv` will generate/maintain the lock

[tool.pytest.ini_options]
addopts = "-q"
testpaths = ["tests"]
pythonpath = ["src"]

# ---- Ruff (formatter + linter) ----
[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = ["dist", "build", ".venv"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort (import sort)
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "PGH", # pygrep-hooks (useful warnings)
]
ignore = [
    "E203",  # space before : (Black/Ruff formatting compatibility)
]

[tool.ruff.lint.isort]
known-first-party = ["agent_rag"]

[tool.ruff.format]
# Match Black's style closely
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = false


[project.scripts]
serve = "agent_rag.main:serve"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.uv.sources]
core = { path = "../core" }
